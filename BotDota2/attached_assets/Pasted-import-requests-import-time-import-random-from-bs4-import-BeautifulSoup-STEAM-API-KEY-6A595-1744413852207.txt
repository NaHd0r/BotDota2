import requests
import time
import random
from bs4 import BeautifulSoup

STEAM_API_KEY = "6A5951358A6AE0B658B818C78DE30A4A"
BASE_URL_LIVE = "https://api.steampowered.com/IDOTA2Match_570/GetLiveLeagueGames/v1/"
ONEXBET_TOURNAMENT_URL = "https://1xsinga.com/en/live/esports/2431462-dota-2-mad-dogs-league"
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Accept": "*/*"
}

TEAMS = {
    9245832: "Prime Legion",
    9245833: "Project Achilles",
    9339710: "Dark Templars",
    8969891: "Stormriders",
    9339714: "Immortal Squad",
    8969895: "Peacekeepers Team",
    9245835: "Monlight Wispers",
    8969893: "Hellspawn",
    9086888: "Azure Dragons",
    8969887: "Freedom Fighters Team",
}

HELLFIRE_ID = 1423256731

def fetch_live_matches():
    params = {"key": STEAM_API_KEY, "league_id": 17911}
    try:
        response = requests.get(BASE_URL_LIVE, params=params, headers=HEADERS)
        if response.status_code != 200:
            print(f"Erreur API Live : {response.status_code} - {response.text}")
            return None
        data = response.json()
        games = data.get("result", {}).get("games", [])
        print(f"Matchs en direct trouvés : {len(games)}" if games else "Aucun match en direct trouvé.")
        return games
    except Exception as e:
        print(f"Exception lors de la requête API Live : {e}")
        return None

def get_1xbet_match_url(radiant_name, dire_name):
    try:
        response = requests.get(ONEXBET_TOURNAMENT_URL, headers=HEADERS, timeout=10)
        if response.status_code != 200:
            print(f"Erreur chargement page : {response.status_code}")
            return None
        
        soup = BeautifulSoup(response.text, 'html.parser')
        match_elements = soup.find_all(class_="c-events__item")
        search_string = f"{radiant_name.lower()} vs {dire_name.lower()}"
        
        for element in match_elements:
            text = element.get_text(strip=True).lower()
            if search_string in text:
                link = element.find('a')
                if link and 'href' in link.attrs:
                    match_url = "https://1xsinga.com" + link['href'] if not link['href'].startswith("http") else link['href']
                    print(f"URL match trouvée : {match_url}")
                    return match_url
        print("Match non trouvé sur 1xBet.")
        return None
    except Exception as e:
        print(f"Erreur recherche URL match : {e}")
        return None

def scrape_1xbet_kill_threshold(match_url):
    if not match_url:
        return None
    try:
        response = requests.get(match_url, headers=HEADERS, timeout=10)
        if response.status_code != 200:
            print(f"Erreur chargement page match : {response.status_code}")
            return None
        
        soup = BeautifulSoup(response.text, 'html.parser')
        bet_elements = soup.find_all(class_="c-bets__item")
        
        for element in bet_elements:
            text = element.get_text(strip=True).lower()
            if "over" in text and "kills" in text and "total even" not in text and "total odd" not in text:
                parts = text.split()
                for part in parts:
                    if part.replace(".", "").isdigit():
                        return float(part)
        print("Seuil kills non trouvé.")
        return None
    except Exception as e:
        print(f"Erreur scraping : {e}")
        return None

def format_duration(seconds):
    seconds = int(seconds)
    return f"{seconds // 60}:{seconds % 60:02d}"

def print_team_details(team_name, team_id, players, total_net_worth):
    print(f"\n{team_name} (Team ID: {team_id}):")
    for acc_id, net_worth in players.items():
        nw = net_worth if isinstance(net_worth, (int, float)) else "Non disponible"
        print(f"  Joueur ID {acc_id} : {nw} or")
    print(f"Net Worth total : {total_net_worth} or")

def check_live_matches():
    last_known_threshold = None

    while True:
        print("\n=== Matchs en direct (Mad Dogs League - Ligue 17911) ===")
        matches = fetch_live_matches()
        
        if not matches:
            print("Aucun match en direct détecté.")
        else:
            for match in matches:
                match_id = match.get("match_id", "Inconnu")
                radiant_team_id = match.get("radiant_team", {}).get("team_id", 0)
                dire_team_id = match.get("dire_team", {}).get("team_id", 0)
                radiant_name = TEAMS.get(radiant_team_id, f"Équipe inconnue ({radiant_team_id})")
                dire_name = TEAMS.get(dire_team_id, f"Équipe inconnue ({dire_team_id})")

                match_url = get_1xbet_match_url(radiant_name, dire_name)
                kill_threshold = scrape_1xbet_kill_threshold(match_url)

                # Extraction des joueurs
                players = match.get("players", [])
                scoreboard = match.get("scoreboard", {})
                if not players and scoreboard:
                    radiant_players = scoreboard.get("radiant", {}).get("players", [])
                    dire_players = scoreboard.get("dire", {}).get("players", [])
                    players = radiant_players + dire_players

                team_players = {radiant_team_id: {}, dire_team_id: {}}
                hellfire_team = None
                hellfire_net_worth = None

                for player in players:
                    account_id = player.get("account_id")
                    team = player.get("team")
                    net_worth = player.get("net_worth", "Non disponible")
                    if account_id and team in [0, 1]:
                        team_id = radiant_team_id if team == 0 else dire_team_id
                        team_players[team_id][account_id] = net_worth
                        if account_id == HELLFIRE_ID:
                            hellfire_team = radiant_name if team == 0 else dire_name
                            hellfire_net_worth = net_worth

                radiant_score = scoreboard.get("radiant", {}).get("score", 0)
                dire_score = scoreboard.get("dire", {}).get("score", 0)
                total_kills = radiant_score + dire_score
                duration = scoreboard.get("duration", 0)

                radiant_total_net_worth = sum(nw for nw in team_players[radiant_team_id].values() if isinstance(nw, (int, float)))
                dire_total_net_worth = sum(nw for nw in team_players[dire_team_id].values() if isinstance(nw, (int, float)))
                net_worth_difference = radiant_total_net_worth - dire_total_net_worth

                print(f"\nMatch ID: {match_id}")
                print(f"Équipes : {radiant_name} vs {dire_name}")
                print(f"Durée : {format_duration(duration)}")
                print(f"Kills : {radiant_name} = {radiant_score}, {dire_name} = {dire_score}, Total = {total_kills}")
                
                # Message pour kills < 10 à 10 minutes (sans son)
                if 600 <= duration <= 660 and total_kills < 10:  # Entre 10:00 et 11:00
                    print("ALERTE : Moins de 10 kills à la 10ème minute !")

                if kill_threshold is not None:
                    print(f"Seuil Total Kills (1xBet) : {kill_threshold}")
                    if last_known_threshold != kill_threshold:
                        print(f"Seuil changé : {last_known_threshold or 'Aucun'} -> {kill_threshold}")
                        last_known_threshold = kill_threshold
                else:
                    print("Seuil Total Kills non disponible.")

                print_team_details(radiant_name, radiant_team_id, team_players[radiant_team_id], radiant_total_net_worth)
                print_team_details(dire_name, dire_team_id, team_players[dire_team_id], dire_total_net_worth)

                print(f"Différence Net Worth ({radiant_name} - {dire_name}) : {net_worth_difference} or")
                if net_worth_difference > 0:
                    print(f"{radiant_name} a un avantage de {net_worth_difference} or")
                elif net_worth_difference < 0:
                    print(f"{dire_name} a un avantage de {-net_worth_difference} or")
                else:
                    print("Net Worth égal.")

                if (radiant_team_id == 9245835 and dire_team_id == 9245833) or \
                   (radiant_team_id == 9245833 and dire_team_id == 9245835):
                    print("\nMatch spécial : Monlight Wispers vs Project Achilles !")
                    if hellfire_team:
                        nw = hellfire_net_worth if isinstance(hellfire_net_worth, (int, float)) else "Non disponible"
                        print(f"Hellfire (ID {HELLFIRE_ID}) joue pour {hellfire_team}, Net Worth : {nw} or")

        time.sleep(random.uniform(10, 15))

if __name__ == "__main__":
    check_live_matches()